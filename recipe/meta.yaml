{% set version = "1.5.4" %}

package:
  name: pytorch-lightning
  version: {{ version }}

source:
  url: https://github.com/PyTorchLightning/pytorch-lightning/archive/refs/tags/{{ version }}.tar.gz
  sha256: e9775723c1b9e12cfdc72e0d431010b3159a85c26a1ec1094a69b916bf7d1612

build:
  number: 0
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - pip
    - python >=3.6
  run:
    - python >=3.6
    - future  # >=0.17.1
    - packaging
    - numpy  >=1.17.2
    - pyyaml  >=5.1
    - pytorch >=1.7
    - tqdm  >=4.41.0
    - tensorboard >=2.2.0
    # originally fsspec[http], which conda doesn't know, see
    # https://github.com/conda-forge/filesystem-spec-feedstock/issues/60
    # for now, install extra-dependencies directly, compare
    # https://github.com/fsspec/filesystem_spec/blob/2021.11.1/setup.py#L49
    - fsspec >=2021.05.0,!=2021.06.0
    - requests
    - aiohttp
    - torchmetrics >=0.4.1
    - pyDeprecate ==0.3.1
    - typing-extensions

test:
  imports:
    - pytorch_lightning
  requires:
    - pip
    - pytest
    - cloudpickle
    - omegaconf
    - onnxruntime
    - scikit-learn
    - torchtext
  source_files:
    - tests
  commands:
    - pip check
    - pytest -v tests/

about:
  home: https://pypi.org/project/pytorch-lightning/
  summary: PyTorch Lightning is the lightweight PyTorch wrapper for ML researchers. Scale your models. Write less boilerplate.
  license: Apache-2.0
  license_file: LICENSE
  dev_url: https://github.com/PyTorchLightning/pytorch-lightning
  description: |
    Lightning is a way to organize your PyTorch code to decouple the science code from the engineering.
     It's more of a style-guide than a framework.

    In Lightning, you organize your code into 3 distinct categories:

    1. Research code (goes in the LightningModule).
    2. Engineering code (you delete, and is handled by the Trainer).
    3. Non-essential research code (logging, etc. this goes in Callbacks).

    Although your research/production project might start simple, once you add things like GPU AND TPU training,
     16-bit precision, etc, you end up spending more time engineering than researching.
     Lightning automates AND rigorously tests those parts for you.

    Overall, Lightning guarantees rigorously tested, correct, modern best practices for the automated parts.

    Documentation
    -------------
    - https://pytorch-lightning.readthedocs.io/en/latest
    - https://pytorch-lightning.readthedocs.io/en/stable

extra:
  recipe-maintainers:
    - williamFalcon
    - borda
